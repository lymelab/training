### Git tutorial
#running codeanywhere.com --> file > new connection > container > blank development stack (ubuntu 16.04) > create

#first let's clone repository into our new workspace
git clone https://github.com/aemann01/git_tutorial
cd git_tutorial

#file system navigation
ls #lists files and folders
mkdir #make a new directory
cd #change directory
cd my_folder #change to my_folder directory
cd .. #move up one folder
pwd #prints your working directory
/ #your root directory
~ #your home directory
tab #autocomplete a command (aka your best friend on the command line)
wc file.txt #word count of file (lists the number of lines, word count, character count)
cat #'concatenate' prints contents of a file to screen
head -n2 file.txt #prints the first two lines of a file
tail -n2 file.txt #prints the last two lines of a file
echo #prints whatever you place after to screen, useful in scripts if you want to append text to a file
clear #clear the contents of your current terminal session
history #get the history of your current terminal session

#wild cards
* #matches everything

#creating new files/directories
vi #vim text editor (to quit do ESC :wq, to edit press i)
touch file.txt #create a new file
rm #remove file (use with CAUTION! This is permanent)
mv #move file or rename file
cp #copy file

#now on to basic git commands

#navigate to your home folder
cd

#into workspace
cd workspace

#we want to make our own git repository, move out of your folder and make a new one
cd ..
mkdir testrepo
cd testrepo

#copy the files from the cloned repo to your new repo
cp ../git_tutorial/* .

#now need to go online and create a new repo
#copy the command line instructions from github.com and initialize your new repo
echo "# testrepo" >> README.md
git init
git add README.md
git commit -m "first commit"
git remote add origin https://github.com/<your account>/testrepo.git
git push -u origin master

#now need to add your new files
#check the status of your repo
git status

#add your files
git add <file names>

#commit your changes -- these should be informative but short, remember these are notes to yourself in case something goes funky down the road
git commit 

#push to your remote repository
git push

#let's test our base count script, input is a fasta file, output will give you base composition of each read in a multifasta file
python3 count_bases.py iodamoeba_rep.fa

#let's mess up the script by reverting to python 2.7 syntax
nano fastalen.py

#remove parantheses around print statement

#now commit your changes on the new file
git status
git add count_bases.py
git commit
git push

#test out our script again
python3 count_bases.py iodamoeba_rep.fa

#whoops now our script doesn't work! revert to your previous commit
#what commit do we want to revert to?
git log
git revert <hash-or-ref>

#commit your reversion and see if your script now works
cat count_bases.py
python3 count_bases.py iodamoeba_rep.fa

#pipe output of command to a new text file
python3 count_bases.py iodamoeba_rep.fa > count_results.txt

#check differences in file online

#other fun command line tricks
#transform newline characters to tab characters
cat count_results.txt | tr "\n" "\t"

#what if we only care about the number of G's and C's in our file?
grep -E "Number of G's|Number of C's" count_results.txt

#what's the smallest count of G's in our file?
grep "Number of G's" count_results.txt | awk -F": " '{print $2}' | sort -nr

#which sequence has the highest count of G bases?
grep "Number.*G.*65" count_results.txt -B 10

